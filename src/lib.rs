use std::{
    hash::Hasher,
    io::{self, BufWriter, Read, Write},
};

use thiserror::Error;

// this is the largest prime number < 2^64. As we will probably never encounter
// a Bloom filter with a number of bits > m (if yes sorry to you people from,
// the future, I envy your available RAM though) we can use the pseudorandom
// sequence generated by repeatedly multiplying the initial hash value h
// with g and taking the modulo over m to generate a sequence of hash values
// that has a uniform distribution.
const M: u64 = 18446744073709551557;

// this is our multiplier. It has a very large primitive root
// so that it will not repeat a given cycle for any practically meaningful
// value of k.
const G: u64 = 18446744073709550147;

pub struct Fingerprint {
    hn: u64,
    m: u64,
    i: u64,
    size: u64,
}

impl Fingerprint {
    #[inline(always)]
    pub fn with_size<H: std::hash::Hasher + Default>(data: &[u8], modulo: u64, size: u64) -> Self {
        let mut hasher: H = H::default();
        hasher.write(data);
        Self {
            hn: hasher.finish(),
            m: modulo,
            i: 0,
            size,
        }
    }
}

impl Iterator for Fingerprint {
    type Item = u64;
    #[inline(always)]
    fn next(&mut self) -> Option<Self::Item> {
        if self.i < self.size {
            self.hn = self.hn.wrapping_mul(G);
            self.hn %= M;
            self.i += 1;
            return Some(self.hn % self.m);
        }
        None
    }
}

fn read_le_u64<R: Read>(r: &mut R) -> Result<u64, io::Error> {
    let mut bytes = [0u8; 8];
    r.read_exact(bytes.as_mut_slice())?;
    Ok(u64::from_le_bytes(bytes))
}

fn read_le_f64<R: Read>(r: &mut R) -> Result<f64, io::Error> {
    let mut bytes = [0u8; 8];
    r.read_exact(bytes.as_mut_slice())?;
    Ok(f64::from_le_bytes(bytes))
}

#[derive(Debug, Error)]
pub enum Error {
    #[error("{0}")]
    IoError(#[from] io::Error),
    #[error("invalid version {0}")]
    InvalidVersion(u64),
    #[error("union error: {0}")]
    Union(String),
}

#[allow(non_snake_case)]
#[derive(Debug, Default, Clone)]
pub struct BloomFilter {
    v: Vec<u64>,
    //desired maximum number of elements
    n: u64,
    //desired false positive probability
    p: f64,
    //number of hash functions
    k: u64,
    //number of bits
    m: u64,
    //number of elements in the filter
    pub N: u64,
    //number of 64-bit integers (generated automatically)
    pub M: u64,
    //arbitrary data that we can attach to the filter
    pub data: Vec<u8>,
}

impl BloomFilter {
    #[inline(always)]
    fn fingerprint<S: AsRef<[u8]>>(&self, value: S) -> Fingerprint {
        Fingerprint::with_size::<Fnv1Hasher>(value.as_ref(), self.m, self.k)
    }

    pub fn with_capacity(cap: u64, proba: f64) -> Self {
        // size in bits, computed from the capacity we want and the probability
        let bit_size = f64::abs(f64::ceil(
            (cap as f64) * f64::log2(proba) / f64::log2(2.0).powf(2.0),
        ));

        // size in bytes
        let u64_size = f64::ceil(bit_size / 64.0) as usize;

        Self {
            v: vec![0; u64_size],
            n: cap,
            p: proba,
            k: f64::ceil(f64::log2(2.0) * bit_size / (cap as f64)) as u64,
            m: bit_size as u64,
            N: 0,
            M: u64_size as u64,
            data: vec![],
        }
    }

    #[inline(always)]
    pub fn cap(&self) -> usize {
        self.n as usize
    }

    #[inline(always)]
    pub fn proba(&self) -> f64 {
        self.p
    }

    #[inline(always)]
    pub fn n_hash_fn(&self) -> u64 {
        self.k
    }

    #[inline(always)]
    pub fn n_bits(&self) -> u64 {
        self.m
    }

    pub fn from_reader<R: Read>(r: R) -> Result<Self, Error> {
        let mut r = io::BufReader::new(r);

        let flags = read_le_u64(&mut r)?;
        let mut b = Self::default();

        let version = flags & 0xff;

        if version != 1 {
            return Err(Error::InvalidVersion(version));
        }

        b.n = read_le_u64(&mut r)?;
        b.p = read_le_f64(&mut r)?;
        b.k = read_le_u64(&mut r)?;
        b.m = read_le_u64(&mut r)?;
        b.N = read_le_u64(&mut r)?;

        // initializing bitset
        b.M = f64::ceil((b.m as f64) / 64.0) as u64;
        b.v = vec![0; b.M as usize];

        // reading the bloom filter
        for i in b.v.iter_mut() {
            *i = read_le_u64(&mut r)?;
        }

        // reading data
        b.data = std::io::read_to_string(r)?.as_bytes().to_vec();

        Ok(b)
    }

    pub fn write<W: Write>(&self, w: &mut W) -> Result<(), Error> {
        let mut w = BufWriter::new(w);

        w.write_all(&1u64.to_le_bytes())?;
        w.write_all(&self.n.to_le_bytes())?;
        w.write_all(&self.p.to_le_bytes())?;
        w.write_all(&self.k.to_le_bytes())?;
        w.write_all(&self.m.to_le_bytes())?;
        w.write_all(&self.N.to_le_bytes())?;

        for i in self.v.iter() {
            w.write_all(&i.to_le_bytes())?;
        }

        w.write_all(&self.data)?;
        Ok(())
    }

    #[inline(always)]
    /// get the nth bit value
    fn get_nth_bit(&self, index: u64) -> bool {
        let iblock = index / 64;
        let ibit = index % 64;
        // we cannot overflow shift as ibit < 64
        let bit = 1u64.wrapping_shl(ibit as u32);
        self.v[iblock as usize] & bit == bit
    }

    #[inline(always)]
    /// set the nth bit and returns old value
    fn set_nth_bit(&mut self, index: u64) -> bool {
        let iblock = index / 64;
        let ibit = index % 64;
        let entry = self
            .v
            .get_mut(iblock as usize)
            .expect("block index out of bound");
        // we cannot overflow shift as ibit < 64
        let bit = 1u64.wrapping_shl(ibit as u32);
        // this is the old bit value
        let old = *entry & bit == bit;
        *entry |= bit;
        old
    }

    pub fn bits(&self) -> Vec<bool> {
        (0..self.m)
            .map(|i| self.get_nth_bit(i))
            .collect::<Vec<bool>>()
    }

    #[inline(always)]
    pub fn insert<S: AsRef<[u8]>>(&mut self, value: S) {
        let mut new = false;
        self.fingerprint(value).for_each(|index| {
            // if old value was 0 we mark it as a new entry
            if !self.set_nth_bit(index) {
                new = true
            }
            debug_assert!(self.get_nth_bit(index))
        });
        if new {
            self.N += 1;
        }
    }

    #[inline(always)]
    pub fn clear(&mut self) {
        self.v.iter_mut().for_each(|bucket| *bucket = 0);
        self.N = 0;
    }

    #[inline(always)]
    pub fn contains<S: AsRef<[u8]>>(&self, value: S) -> bool {
        for index in self.fingerprint(value) {
            if !self.get_nth_bit(index) {
                return false;
            }
        }
        true
    }

    /// counts all the set bits in the bloom filter
    #[inline(always)]
    pub fn count_ones(&self) -> usize {
        self.v.iter().map(|u| u.count_ones() as usize).sum()
    }

    /// counts all the unset bits in the bloom filter
    #[inline(always)]
    pub fn count_zeros(&self) -> usize {
        self.v.iter().map(|u| u.count_zeros() as usize).sum()
    }

    fn update_count(&mut self) {
        self.N = (-(self.m as f64 * f64::ln(1.0 - (self.count_ones() as f64 / self.m as f64)))
            / self.k as f64) as u64;
    }

    #[inline(always)]
    /// returns an estimate of the number of element in the filter
    /// the exact number of element cannot be known as there might
    /// be collisions
    pub fn count_estimate(&self) -> u64 {
        self.N
    }

    pub fn size_in_bytes(&self) -> usize {
        self.M as usize * core::mem::size_of::<u64>()
    }

    #[inline(always)]
    pub fn has_same_params(&self, other: &Self) -> bool {
        self.n == other.n
            && self.p == other.p
            && self.k == other.k
            && self.m == other.m
            && self.M == other.M
    }

    /// makes the union of self with another bloom filter (having the same
    /// parameters)
    pub fn union(&mut self, other: &Self) -> Result<(), Error> {
        if !self.has_same_params(other) {
            return Err(Error::Union(
                "cannot make union of bloom filters with different parameters".into(),
            ));
        }

        for (i, e) in self.v.iter_mut().enumerate() {
            *e |= other.v[i];
        }

        // we need to update the estimated number of elements after a union
        self.update_count();

        Ok(())
    }
}

const FNV_OFFSET: u64 = 14695981039346656037;
const FNV_PRIME: u64 = 1099511628211;

#[derive(Debug)]
pub struct Fnv1Hasher {
    sum: u64,
}

impl Default for Fnv1Hasher {
    fn default() -> Self {
        Self { sum: FNV_OFFSET }
    }
}

impl Hasher for Fnv1Hasher {
    #[inline(always)]
    fn finish(&self) -> u64 {
        self.sum
    }

    #[inline(always)]
    fn write(&mut self, bytes: &[u8]) {
        bytes.iter().for_each(|b| {
            self.sum = self.sum.wrapping_mul(FNV_PRIME);
            self.sum ^= *b as u64;
        })
    }
}

impl Fnv1Hasher {
    // ToDo move this to a generic taking a Hasher as param
    pub fn digest<S: AsRef<[u8]>>(s: S) -> u64 {
        let mut h = Self::default();
        h.write(s.as_ref());
        h.finish()
    }
}

// bloom![cap, prob, {values...}]
#[macro_export]
macro_rules! bloom {
        ($cap:expr, $proba:expr) => {
            $crate::BloomFilter::with_capacity($cap, $proba)
        };
        ($cap:expr, $proba:expr, [$($values:literal),*]) => {
            {
                let mut b=bloom!($cap, $proba);
                $(b.insert($values);)*
                b
            }
        };
    }

#[cfg(test)]
mod tests {
    use std::io::{self};

    use super::*;

    #[test]
    // this test checks that FnvHasher returns the exact same value as the
    // go library (used in DCSOÂ implementation)
    fn test_fnv() {
        assert_eq!(Fnv1Hasher::digest("Hello, World!"), 8889723880822884486);
        assert_eq!(
            Fnv1Hasher::digest("Let's rustify all this"),
            13581150826273240441
        );
    }

    #[test]
    fn test_fnv_update() {
        let mut hasher = Fnv1Hasher::default();
        hasher.write("Hello, ".as_bytes());
        hasher.write("World!".as_bytes());
        assert_eq!(hasher.finish(), 8889723880822884486)
    }

    #[test]
    fn test_bloom() {
        let mut b = BloomFilter::with_capacity(100000, 0.001);
        assert!(!b.contains("value"));
        b.insert("value");
        assert!(b.contains("value"));
        assert_eq!(b.N, 1);
        assert!(!b.contains("unknown"));
    }

    #[test]
    fn test_macro() {
        let b = bloom!(1000, 0.0001, ["hello", "world"]);
        assert!(b.contains("hello"));
        assert!(b.contains("world"));
    }

    #[test]
    fn test_serialization() {
        let b = bloom!(1000, 0.0001, ["deserialization", "test"]);
        let mut cursor = io::Cursor::new(vec![]);
        b.write(&mut cursor).unwrap();
        cursor.set_position(0);
        // deserializing the stuff out
        let b = BloomFilter::from_reader(cursor).unwrap();
        assert_eq!(b.proba(), 0.0001);
        assert!(b.contains("deserialization"));
        assert!(b.contains("test"));
        assert!(!b.contains("hello"));
        assert!(!b.contains("world"));
    }

    #[test]
    fn test_deserialization() {
        // this test file has been generated with Go bloom cli
        let data = include_bytes!("./data/test.bloom");
        let b = BloomFilter::from_reader(io::BufReader::new(io::Cursor::new(data))).unwrap();
        // proba it's been serialzed with with Go implementation
        assert_eq!(b.proba(), 0.01);
        assert!(b.contains("hello"));
        assert!(b.contains("world"));
        assert!(!b.contains("hello world"));
    }

    #[test]
    fn test_union() {
        let mut b = bloom!(1000, 0.0001, ["hello", "world"]);
        let o = bloom!(1000, 0.0001, ["union", "test"]);

        b.union(&o).unwrap();

        ["hello", "world", "union", "test"]
            .into_iter()
            .for_each(|v| {
                assert!(b.contains(v));
            });

        // estimate count should be exact for a small test like this
        assert_eq!(b.count_estimate(), 4);
    }

    #[test]
    fn test_union_failure() {
        let mut b = bloom!(1000, 0.0001, ["hello", "world"]);
        let o = bloom!(100, 0.0001, ["union", "test"]);

        assert!(b.union(&o).is_err())
    }
}
